{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","onClick","toggleMode","htmlFor","TextForm","useState","text","setText","style","color","heading","onChange","event","target","value","backgroundColor","rows","newText","toLocaleUpperCase","showAlert","toLowerCase","document","getElementById","select","navigator","clipboard","writeText","split","join","length","defaultProps","aboutText","Alert","alert","role","word","lower","charAt","toUpperCase","slice","capitalize","msg","App","setMode","setAlert","message","setTimeout","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.0048f39c.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n// import { Link } from 'react-router-dom'\r\n\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n       <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n  <div className=\"container-fluid\">\r\n    {/* <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link> */}\r\n    <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n    \r\n    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n      <span className=\"navbar-toggler-icon\"></span>\r\n    </button>\r\n    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n      <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n        <li className=\"nav-item\">\r\n          {/* <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link> */}\r\n          <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n\r\n        </li>\r\n        {/* <li className=\"nav-item\">\r\n          <Link className=\"nav-link\" to=\"/about\">{props.aboutText}</Link>\r\n        </li> */}\r\n      </ul>\r\n      {/* <form className=\"d-flex\">\r\n        <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n        <button className=\"btn btn-outline-success\" type=\"submit\">Search</button>\r\n      </form> */}   \r\n      <div className={`form-check form-switch text-${props.mode === 'light'?'dark':'light'}`}>\r\n        <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" id=\"flexSwitchCheckDefault\"/>\r\n        <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable DarkMode</label>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</nav>\r\n    )\r\n}\r\n\r\nNavbar.propTypes = {title:PropTypes.string.isRequired,\r\n                    aboutText:PropTypes.string.isRequired,       }  \r\n\r\n\r\nNavbar.defaultProps = {title:'Set title here',\r\n                       aboutText:'About',\r\n}\r\n","import React,{useState} from 'react'\r\n\r\nexport default function TextForm(props) {\r\n\r\n    const handleUpClick = () => {\r\n        // console.log('Upper case was clicked'+ text);\r\n        let newText = text.toLocaleUpperCase()\r\n        setText(newText)\r\n        props.showAlert(\"Converted to uppercase!\",\"success\")\r\n\r\n    }\r\n\r\n    const handleLoClick = () => {\r\n        // console.log('Upper case was clicked'+ text);\r\n        let newText = text.toLowerCase()\r\n        setText(newText)\r\n        props.showAlert(\"Converted to Lowercase!\",\"success\")\r\n\r\n\r\n    }\r\n\r\n     const handleClearClick = () => {\r\n        let newText = \" \"\r\n        setText(newText)\r\n        props.showAlert(\"Text Cleared!\",\"success\")\r\n\r\n\r\n    }\r\n\r\n    //built with regex\r\n     const handleExtraSpace = () => {\r\n        let newText = text.split(/[ ]+/)\r\n        setText(newText.join(\" \"))\r\n        props.showAlert(\"Extra Spaces Removed!\",\"success\")\r\n        \r\n        \r\n\r\n    }\r\n\r\n     const handleCopy = () => {\r\n        let text = document.getElementById('myBox')\r\n        text.select();\r\n        navigator.clipboard.writeText(text.value)\r\n        props.showAlert(\"Text Copied to Clipboard!\",\"success\")\r\n\r\n\r\n    }\r\n    \r\n     const handleOnChange = (event)=> {\r\n        // console.log('On change');\r\n        setText(event.target.value)\r\n\r\n    }\r\n\r\n    const[text, setText] = useState('');\r\n    \r\n\r\n    return (\r\n        <>\r\n            <div className=\"container\" style={{color:props.mode === 'dark'?'white':'#042743'}}>\r\n                <h1>{props.heading}</h1>\r\n                <div className=\"mb-3\">\r\n                <textarea className=\"form-control\" onChange={handleOnChange} style={{backgroundColor:props.mode === 'dark'?'grey':'white', color: props.mode === 'dark'?'white':'#042743'}} value={text} id=\"myBox\" rows=\"10\"></textarea>\r\n                </div>\r\n                <button className=\"btn btn-primary mx-2\" onClick={handleUpClick}>Convert to Uppercase</button>\r\n                <button className=\"btn btn-primary mx-2\" onClick={handleLoClick}>Convert to Lowercase</button>\r\n                <button className=\"btn btn-primary mx-2\" onClick={handleClearClick}>Click to Clear</button>\r\n                <button className=\"btn btn-primary mx-2\" onClick={handleCopy}>Copy Text</button>\r\n                <button className=\"btn btn-primary mx-2\" onClick={handleExtraSpace}>Remove Extra Spaces</button>\r\n\r\n\r\n                \r\n\r\n            </div>\r\n            <div className=\"container my-3\" style={{color:props.mode === 'dark'?'white':'#042743'}}>\r\n                <h3>Your Text Summary</h3>\r\n                <p>{text.split(\" \").length} words and {text.length} characters</p>\r\n                <p>{0.008 * text.split(\" \").length} Minutes Read</p>\r\n                <p>Preview</p>\r\n                <p>{text.length>0?text:'Enter something in the textbox to preview it here'}</p>\r\n                \r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n\r\n    const capitalize = (word) =>{\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1)\r\n    }\r\n    return (\r\n       props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n                            <strong>{capitalize(props.alert.type)}</strong> : {props.alert.msg}\r\n                     </div>\r\n                    )\r\n}\r\n\r\nexport default Alert\r\n","import './App.css';\n// import About from './components/About';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport React, { useState } from 'react';\nimport Alert from './components/Alert';\n// import {\n//   BrowserRouter as Router,\n//   Switch,\n//   Route,\n// } from \"react-router-dom\";  \nfunction App() {\n  const [mode, setMode] = useState('light')  //whether dark mode is enabled or not\n  const [alert, setAlert] = useState(null)\n\n  const showAlert = (message,type) =>{\n    setAlert({\n      msg: message,\n      type: type\n    })\n    setTimeout(() => {\n      setAlert(null)\n    }, 1500);\n  }\n\n  const toggleMode = () => {\n    if(mode === 'light') {\n      setMode('dark');\n      document.body.style.backgroundColor = '#042743'\n      showAlert(\"Dark mode has been enabled\",\"success\")\n      document.title='TextUtils-Dark Mode'\n      // setInterval(() => {\n      // document.title='TextUtils is Amazing'\n      // }, 2000);\n      \n      // setInterval(() => {\n      // document.title='Install TextUtils now'\n      // }, 1500);\n    }\n    else{\n      setMode('light');\n      document.body.style.backgroundColor = 'white'\n      showAlert(\"Light mode has been enabled\",\"success\")\n      document.title='TextUtils-Light Mode'\n    }\n  }\n\n  return (\n    <>\n    {/* <Navbar title=\"Thala\" aboutText=\"Dhoni\"/> */}\n     {/* <Navbar/> */}\n     {/* <Router> */}\n          <Navbar title=\"Textutils\" mode={mode} toggleMode={toggleMode}/>\n          <Alert alert={alert}/>\n          <div className=\"container my-3\">\n             {/* <Switch> */}\n                {/* <Route exact path=\"/about\"> */}\n                  {/* <About /> */}\n                {/* </Route> */}\n                {/* <Route exact path=\"/\"> */}\n                  <TextForm heading=\"Enter the Text to Analyze\" showAlert={showAlert}  mode={mode}/>\n                {/* </Route> */}\n            {/* </Switch>  */}\n          </div>\n      {/* </Router> */}/\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}